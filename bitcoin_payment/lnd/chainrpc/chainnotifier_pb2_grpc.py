# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import chainnotifier_pb2 as chainrpc_dot_chainnotifier__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chainrpc/chainnotifier_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ChainNotifierStub(object):
    """ChainNotifier is a service that can be used to get information about the
    chain backend by registering notifiers for chain events.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterConfirmationsNtfn = channel.unary_stream(
                '/chainrpc.ChainNotifier/RegisterConfirmationsNtfn',
                request_serializer=chainrpc_dot_chainnotifier__pb2.ConfRequest.SerializeToString,
                response_deserializer=chainrpc_dot_chainnotifier__pb2.ConfEvent.FromString,
                _registered_method=True)
        self.RegisterSpendNtfn = channel.unary_stream(
                '/chainrpc.ChainNotifier/RegisterSpendNtfn',
                request_serializer=chainrpc_dot_chainnotifier__pb2.SpendRequest.SerializeToString,
                response_deserializer=chainrpc_dot_chainnotifier__pb2.SpendEvent.FromString,
                _registered_method=True)
        self.RegisterBlockEpochNtfn = channel.unary_stream(
                '/chainrpc.ChainNotifier/RegisterBlockEpochNtfn',
                request_serializer=chainrpc_dot_chainnotifier__pb2.BlockEpoch.SerializeToString,
                response_deserializer=chainrpc_dot_chainnotifier__pb2.BlockEpoch.FromString,
                _registered_method=True)


class ChainNotifierServicer(object):
    """ChainNotifier is a service that can be used to get information about the
    chain backend by registering notifiers for chain events.
    """

    def RegisterConfirmationsNtfn(self, request, context):
        """
        RegisterConfirmationsNtfn is a synchronous response-streaming RPC that
        registers an intent for a client to be notified once a confirmation request
        has reached its required number of confirmations on-chain.

        A confirmation request must have a valid output script. It is also possible
        to give a transaction ID. If the transaction ID is not set, a notification
        is sent once the output script confirms. If the transaction ID is also set,
        a notification is sent once the output script confirms in the given
        transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterSpendNtfn(self, request, context):
        """
        RegisterSpendNtfn is a synchronous response-streaming RPC that registers an
        intent for a client to be notification once a spend request has been spent
        by a transaction that has confirmed on-chain.

        A client can specify whether the spend request should be for a particular
        outpoint  or for an output script by specifying a zero outpoint.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterBlockEpochNtfn(self, request, context):
        """
        RegisterBlockEpochNtfn is a synchronous response-streaming RPC that
        registers an intent for a client to be notified of blocks in the chain. The
        stream will return a hash and height tuple of a block for each new/stale
        block in the chain. It is the client's responsibility to determine whether
        the tuple returned is for a new or stale block in the chain.

        A client can also request a historical backlog of blocks from a particular
        point. This allows clients to be idempotent by ensuring that they do not
        missing processing a single block within the chain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChainNotifierServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterConfirmationsNtfn': grpc.unary_stream_rpc_method_handler(
                    servicer.RegisterConfirmationsNtfn,
                    request_deserializer=chainrpc_dot_chainnotifier__pb2.ConfRequest.FromString,
                    response_serializer=chainrpc_dot_chainnotifier__pb2.ConfEvent.SerializeToString,
            ),
            'RegisterSpendNtfn': grpc.unary_stream_rpc_method_handler(
                    servicer.RegisterSpendNtfn,
                    request_deserializer=chainrpc_dot_chainnotifier__pb2.SpendRequest.FromString,
                    response_serializer=chainrpc_dot_chainnotifier__pb2.SpendEvent.SerializeToString,
            ),
            'RegisterBlockEpochNtfn': grpc.unary_stream_rpc_method_handler(
                    servicer.RegisterBlockEpochNtfn,
                    request_deserializer=chainrpc_dot_chainnotifier__pb2.BlockEpoch.FromString,
                    response_serializer=chainrpc_dot_chainnotifier__pb2.BlockEpoch.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chainrpc.ChainNotifier', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('chainrpc.ChainNotifier', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ChainNotifier(object):
    """ChainNotifier is a service that can be used to get information about the
    chain backend by registering notifiers for chain events.
    """

    @staticmethod
    def RegisterConfirmationsNtfn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/chainrpc.ChainNotifier/RegisterConfirmationsNtfn',
            chainrpc_dot_chainnotifier__pb2.ConfRequest.SerializeToString,
            chainrpc_dot_chainnotifier__pb2.ConfEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterSpendNtfn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/chainrpc.ChainNotifier/RegisterSpendNtfn',
            chainrpc_dot_chainnotifier__pb2.SpendRequest.SerializeToString,
            chainrpc_dot_chainnotifier__pb2.SpendEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterBlockEpochNtfn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/chainrpc.ChainNotifier/RegisterBlockEpochNtfn',
            chainrpc_dot_chainnotifier__pb2.BlockEpoch.SerializeToString,
            chainrpc_dot_chainnotifier__pb2.BlockEpoch.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
